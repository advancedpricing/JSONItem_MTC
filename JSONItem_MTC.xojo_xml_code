<?xml version="1.0" encoding="UTF-8"?>
<RBProject version="2014r2.1" FormatVersion="2" MinIDEVersion="20070100">
<block type="Module" ID="1729940940">
 <ObjName>JSONItem_MTC</ObjName>
 <ObjContainerID>0</ObjContainerID>
 <IsClass>1</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>AdvancePastWhiteSpace</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub AdvancePastWhiteSpace(inMB As MemoryBlock, ByRef pos As Integer)</SourceLine>
   <SourceLine>dim inPtr as Ptr = inMB</SourceLine>
   <SourceLine>dim lastPos as integer = inMB.Size - 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>do</SourceLine>
   <SourceLine>if pos &gt; lastPos then</SourceLine>
   <SourceLine>raise new JSONException( "A parsing error occurred at", 2, pos )</SourceLine>
   <SourceLine>return</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim thisByte as byte = inPtr.Byte( pos )</SourceLine>
   <SourceLine>select case thisByte</SourceLine>
   <SourceLine>case 9, 10, 13, 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>return</SourceLine>
   <SourceLine>end select</SourceLine>
   <SourceLine>loop</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>inMB As MemoryBlock, ByRef pos As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Append</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Append(value As Variant)</SourceLine>
   <SourceLine>if not EnsureArray() then</SourceLine>
   <SourceLine>return</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>HasSetType = kHasSetArray</SourceLine>
   <SourceLine>ArrayValues.Append value</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>value As Variant</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Child</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Child(index As Integer) As JSONItem_MTC</SourceLine>
   <SourceLine>dim r as JSONItem_MTC = self.Value( index )</SourceLine>
   <SourceLine>return r</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>index As Integer</ItemParams>
  <ItemResult>JSONItem_MTC</ItemResult>
 </Method>
 <Method>
  <ItemName>Child</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Child(index As Integer, Assigns obj As JSONItem_MTC)</SourceLine>
   <SourceLine>self.Value( index ) = obj</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>index As Integer, Assigns obj As JSONItem_MTC</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Child</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Child(name As String) As JSONItem_MTC</SourceLine>
   <SourceLine>name = EncodeName( name )</SourceLine>
   <SourceLine>dim r as JSONItem_MTC = self.Value( name )</SourceLine>
   <SourceLine>return r</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>name As String</ItemParams>
  <ItemResult>JSONItem_MTC</ItemResult>
 </Method>
 <Method>
  <ItemName>Child</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Child(name As String, Assigns obj As JSONItem_MTC)</SourceLine>
   <SourceLine>name = EncodeName( name )</SourceLine>
   <SourceLine>self.Value( name ) = obj</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>name As String, Assigns obj As JSONItem_MTC</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Clear</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Clear()</SourceLine>
   <SourceLine>mObjectValues = nil</SourceLine>
   <SourceLine>redim ArrayValues( -1 )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor()</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(JSONString As String)</SourceLine>
   <SourceLine>self.Load JSONString</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>JSONString As String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Count</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Count() As Integer</SourceLine>
   <SourceLine>if IsArray then</SourceLine>
   <SourceLine>return ArrayValues.Ubound + 1</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>return ObjectValues.Count</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>DecodeString</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function DecodeString(inMB As MemoryBlock, ByRef pos As Integer) As String</SourceLine>
   <SourceLine>dim lastPos as integer = inMB.Size - 1</SourceLine>
   <SourceLine>if pos &gt; lastPos then</SourceLine>
   <SourceLine>raise new JSONException( "Missing """, 7, pos + 1 )</SourceLine>
   <SourceLine>return ""</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim inPtr as Ptr = inMB</SourceLine>
   <SourceLine>if inPtr.Byte( pos ) &lt;&gt; kQuote then</SourceLine>
   <SourceLine>raise new JSONException( "Missing """, 7, pos + 1 )</SourceLine>
   <SourceLine>return ""</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim outMB as new MemoryBlock( inMB.Size )</SourceLine>
   <SourceLine>dim outPtr as Ptr = outMB</SourceLine>
   <SourceLine>dim outIndex as integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>dim inBackslash as boolean</SourceLine>
   <SourceLine>do</SourceLine>
   <SourceLine>if pos &gt; lastPos then</SourceLine>
   <SourceLine>dim msg as string = if( self.IsArray, "Missing , or ]", "Missing , or }" )</SourceLine>
   <SourceLine>raise new JSONException( msg, 6, pos )</SourceLine>
   <SourceLine>return ""</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim thisByte as integer = inPtr.Byte( pos )</SourceLine>
   <SourceLine>select case true</SourceLine>
   <SourceLine>case not inBackSlash and thisByte = kBackSlash</SourceLine>
   <SourceLine>inBackslash = true</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case not inBackslash and thisByte = kQuote // End</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>exit do</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case inBackslash</SourceLine>
   <SourceLine>select case thisByte</SourceLine>
   <SourceLine>case kBackSlash, kQuote, kForwardSlash</SourceLine>
   <SourceLine>outPtr.Byte( outIndex ) = thisByte</SourceLine>
   <SourceLine>outIndex = outIndex + 1</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>case 114 // r</SourceLine>
   <SourceLine>outPtr.Byte( outIndex ) = 13</SourceLine>
   <SourceLine>outIndex = outIndex + 1</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>case 116 // t</SourceLine>
   <SourceLine>outPtr.Byte( outIndex ) = 9</SourceLine>
   <SourceLine>outIndex = outIndex + 1</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>case 110 // n</SourceLine>
   <SourceLine>outPtr.Byte( outIndex ) = 10</SourceLine>
   <SourceLine>outIndex = outIndex + 1</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>case 98 // b</SourceLine>
   <SourceLine>outPtr.Byte( outIndex ) = 8</SourceLine>
   <SourceLine>outIndex = outIndex + 1</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>case 102 // f</SourceLine>
   <SourceLine>outPtr.Byte( outIndex ) = 12</SourceLine>
   <SourceLine>outIndex = outIndex + 1</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>case 117 /// u</SourceLine>
   <SourceLine>if ( pos + 5 ) &gt; lastPos then</SourceLine>
   <SourceLine>raise new JSONException( "Improperly formed JSON string", 0 )</SourceLine>
   <SourceLine>return ""</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim asString as string = inMB.StringValue( pos + 1, 4 ).DefineEncoding( Encodings.UTF8 )</SourceLine>
   <SourceLine>dim uValue as integer = val( "&amp;h" + asString )</SourceLine>
   <SourceLine>dim char as string = Encodings.UTF8.Chr( uValue )</SourceLine>
   <SourceLine>outMB.StringValue( outIndex, char.LenB ) = char</SourceLine>
   <SourceLine>outIndex = outIndex + char.LenB</SourceLine>
   <SourceLine>pos = pos + 4</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else // Some random escaped character</SourceLine>
   <SourceLine>raise new JSONException( "Improperly formed JSON string", 0 )</SourceLine>
   <SourceLine>return ""</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end select</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>inBackslash = false</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>outPtr.Byte( outIndex ) = thisByte</SourceLine>
   <SourceLine>outIndex = outIndex + 1</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end select</SourceLine>
   <SourceLine>loop</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim r as string = outMB.StringValue( 0, outIndex )</SourceLine>
   <SourceLine>r = r.DefineEncoding( Encodings.UTF8 )</SourceLine>
   <SourceLine>return r</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>inMB As MemoryBlock, ByRef pos As Integer</ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Method>
  <ItemName>DecodeValue</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function DecodeValue(inMB As MemoryBlock, ByRef pos As Integer) As Variant</SourceLine>
   <SourceLine>dim lastPos as integer = inMB.Size - 1</SourceLine>
   <SourceLine>if pos &gt; lastPos then</SourceLine>
   <SourceLine>raise new JSONException( "A parsing error occurred", 2, pos + 1 )</SourceLine>
   <SourceLine>return nil</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>static rxInteger as RegEx</SourceLine>
   <SourceLine>if rxInteger is nil then</SourceLine>
   <SourceLine>rxInteger = new RegEx</SourceLine>
   <SourceLine>rxInteger.SearchPattern = "\A[-+]?\d+\z"</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim inPtr as Ptr = inMB</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim thisByte as integer = inPtr.Byte( pos )</SourceLine>
   <SourceLine>if thisByte = kQuote then</SourceLine>
   <SourceLine>return DecodeString( inMB, pos )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif thisByte = kOpenCurlyBrace or thisByte = kOpenSquareBracket then</SourceLine>
   <SourceLine>dim child as new JSONItem_MTC</SourceLine>
   <SourceLine>child.Load( inMB, pos )</SourceLine>
   <SourceLine>return child</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Look for the next ender</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim startPos as integer = pos</SourceLine>
   <SourceLine>dim endPos as integer = pos + 1</SourceLine>
   <SourceLine>do</SourceLine>
   <SourceLine>if endPos &gt; lastPos then</SourceLine>
   <SourceLine>dim msg as string = if( self.IsArray, "Missing , or ]", "Missing , or }" )</SourceLine>
   <SourceLine>raise new JSONException( msg, 6, endPos + 1 )</SourceLine>
   <SourceLine>return nil</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>thisByte = inPtr.Byte( endPos )</SourceLine>
   <SourceLine>if thisByte &lt; 33 then</SourceLine>
   <SourceLine>exit do</SourceLine>
   <SourceLine>elseif thisByte = kComma then</SourceLine>
   <SourceLine>exit do</SourceLine>
   <SourceLine>elseif thisByte = kCloseCurlyBrace or thisByte = kCloseSquareBracket then</SourceLine>
   <SourceLine>exit do</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>endPos = endPos + 1</SourceLine>
   <SourceLine>loop</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = endPos</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim valueString as string = inMB.StringValue( startPos, endPos - startPos ).DefineEncoding( Encodings.UTF8 )</SourceLine>
   <SourceLine>dim value as variant</SourceLine>
   <SourceLine>if valueString = "true" then</SourceLine>
   <SourceLine>value = true</SourceLine>
   <SourceLine>elseif valueString = "false" then</SourceLine>
   <SourceLine>value = false</SourceLine>
   <SourceLine>elseif valueString = "null" then</SourceLine>
   <SourceLine>value = nil</SourceLine>
   <SourceLine>elseif rxInteger.Search( valueString ) &lt;&gt; nil then</SourceLine>
   <SourceLine>dim i as Int64 = val( valueString )</SourceLine>
   <SourceLine>value = i</SourceLine>
   <SourceLine>elseif IsNumeric( valueString ) then</SourceLine>
   <SourceLine>value = val( valueString )</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>raise new JSONException( "Illegal Value", 10, startPos )</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return value</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>inMB As MemoryBlock, ByRef pos As Integer</ItemParams>
  <ItemResult>Variant</ItemResult>
 </Method>
 <Method>
  <ItemName>EncodeString</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub EncodeString(s As String, escapeSlashes As Boolean, output() As String)</SourceLine>
   <SourceLine>const kBackSlashVal = 92</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if s = "" then</SourceLine>
   <SourceLine>output.Append """"""</SourceLine>
   <SourceLine>return</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>s = s.ConvertEncoding( Encodings.UTF8 )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim inMB as MemoryBlock = s</SourceLine>
   <SourceLine>dim outSize as integer = inMB.Size</SourceLine>
   <SourceLine>if outSize &lt; 32 then</SourceLine>
   <SourceLine>outSize = 32</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>dim outMB as new MemoryBlock( outSize )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim inPtr as Ptr = inMB</SourceLine>
   <SourceLine>dim outPtr as Ptr = outMB</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim lastIndex as integer = inMB.Size - 1</SourceLine>
   <SourceLine>dim inIndex as integer = -1</SourceLine>
   <SourceLine>dim outIndex as integer = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>do</SourceLine>
   <SourceLine>inIndex = inIndex + 1</SourceLine>
   <SourceLine>if inIndex &gt; lastIndex then</SourceLine>
   <SourceLine>exit do</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if outIndex &gt; ( outSize - 6 ) then</SourceLine>
   <SourceLine>do</SourceLine>
   <SourceLine>outSize = outSize * 2</SourceLine>
   <SourceLine>loop until outIndex &lt;= ( outSize - 6 )</SourceLine>
   <SourceLine>outMB.Size = outSize</SourceLine>
   <SourceLine>outPtr = outMB</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim thisByte as byte = inPtr.Byte( inIndex )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if thisByte = 34 or thisByte = kBackSlashVal then // quote or backslash</SourceLine>
   <SourceLine>outPtr.Byte( outIndex ) = kBackSlashVal</SourceLine>
   <SourceLine>outPtr.Byte( outIndex + 1 ) = thisByte</SourceLine>
   <SourceLine>outIndex = outIndex + 2</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif thisByte = 47 then // slash</SourceLine>
   <SourceLine>if escapeSlashes then</SourceLine>
   <SourceLine>outPtr.Byte( outIndex ) = kBackSlashVal</SourceLine>
   <SourceLine>outPtr.Byte( outIndex + 1 ) = thisByte</SourceLine>
   <SourceLine>outIndex = outIndex + 2</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>outPtr.Byte( outIndex ) = thisByte</SourceLine>
   <SourceLine>outIndex = outIndex + 1</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif thisByte = 8 then // backspace</SourceLine>
   <SourceLine>outPtr.Byte( outIndex ) = kBackSlashVal</SourceLine>
   <SourceLine>outPtr.Byte( outIndex + 1 ) = 98 // b</SourceLine>
   <SourceLine>outIndex = outIndex + 2</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif thisByte = 9 then // tab</SourceLine>
   <SourceLine>outPtr.Byte( outIndex ) = kBackSlashVal</SourceLine>
   <SourceLine>outPtr.Byte( outIndex + 1 ) = 116 // t</SourceLine>
   <SourceLine>outIndex = outIndex + 2</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif thisByte = 10 then // linefeed</SourceLine>
   <SourceLine>outPtr.Byte( outIndex ) = kBackSlashVal</SourceLine>
   <SourceLine>outPtr.Byte( outIndex + 1 ) = 110 // n</SourceLine>
   <SourceLine>outIndex = outIndex + 2</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif thisByte = 12 then // formfeed</SourceLine>
   <SourceLine>outPtr.Byte( outIndex ) = kBackSlashVal</SourceLine>
   <SourceLine>outPtr.Byte( outIndex + 1 ) = 102 // f</SourceLine>
   <SourceLine>outIndex = outIndex + 2</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif thisByte = 13 then // return</SourceLine>
   <SourceLine>outPtr.Byte( outIndex ) = kBackSlashVal</SourceLine>
   <SourceLine>outPtr.Byte( outIndex + 1 ) = 114 // r</SourceLine>
   <SourceLine>outIndex = outIndex + 2</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif thisByte &lt; 32 then // control character</SourceLine>
   <SourceLine>dim insertValue as string = "\u" + Right( "000" + hex( thisByte ), 4 )</SourceLine>
   <SourceLine>outMB.StringValue( outIndex, 6 ) = insertValue</SourceLine>
   <SourceLine>outIndex = outIndex + 6</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif  thisByte &gt; 127 then // high-ascii</SourceLine>
   <SourceLine>dim byteLength as integer</SourceLine>
   <SourceLine>if thisByte &gt; 240 then</SourceLine>
   <SourceLine>byteLength = 4</SourceLine>
   <SourceLine>elseif thisByte &gt; 224 then</SourceLine>
   <SourceLine>byteLength = 3</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>byteLength = 2</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>dim thisChar as string = inMB.StringValue( inIndex, byteLength )</SourceLine>
   <SourceLine>thisChar = thisChar.DefineEncoding( Encodings.UTF8 )</SourceLine>
   <SourceLine>outMB.StringValue( outIndex, 6 ) = "\u" + Right( "000" + hex( thisChar.Asc ), 4 )</SourceLine>
   <SourceLine>outIndex = outIndex + 6</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>inIndex = inIndex + byteLength</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else // thisByte &gt; 31 and thisByte &lt; 128 </SourceLine>
   <SourceLine>outPtr.Byte( outIndex ) = thisByte</SourceLine>
   <SourceLine>outIndex = outIndex + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>loop</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>s = outMB.StringValue( 0, outIndex )</SourceLine>
   <SourceLine>s = s.DefineEncoding( Encodings.UTF8 )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>output.Append """"</SourceLine>
   <SourceLine>output.Append s</SourceLine>
   <SourceLine>output.Append """"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>s As String, escapeSlashes As Boolean, output() As String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>EncodeValue</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub EncodeValue(value As Variant, settings As JSONItem_MTC, level As Integer, output() As String)</SourceLine>
   <SourceLine>if value IsA JSONItem_MTC then</SourceLine>
   <SourceLine>JSONItem_MTC( value ).ToString( output, settings, level )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif value IsA Dictionary then</SourceLine>
   <SourceLine>dim child as JSONItem_MTC = Dictionary( value )</SourceLine>
   <SourceLine>child.ToString( output, settings, level )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif value.Type = Variant.TypeString or value.Type = Variant.TypeCString or _</SourceLine>
   <SourceLine>value.Type = Variant.TypePString then</SourceLine>
   <SourceLine>EncodeString( value, settings.EscapeSlashes, output )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif value.Type = Variant.TypeDouble or value.Type = Variant.TypeSingle or _</SourceLine>
   <SourceLine>value.Type = Variant.TypeCurrency then</SourceLine>
   <SourceLine>output.Append Format( value, settings.DecimalFormat )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif value.Type = Variant.TypeNil then</SourceLine>
   <SourceLine>output.Append "null"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>output.Append value.StringValue.Lowercase</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>value As Variant, settings As JSONItem_MTC, level As Integer, output() As String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>EnsureArray</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function EnsureArray() As Boolean</SourceLine>
   <SourceLine>if HasSetType &lt;&gt; kHasSetObject then</SourceLine>
   <SourceLine>return true</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>raise new JSONException( "This JSONItem_MTC is an obect", 13 )</SourceLine>
   <SourceLine>return false</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>EnsureObject</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function EnsureObject() As Boolean</SourceLine>
   <SourceLine>if HasSetType &lt;&gt; kHasSetArray then</SourceLine>
   <SourceLine>return true</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>raise new JSONException( "This JSONItem_MTC is an array", 13 )</SourceLine>
   <SourceLine>return false</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>HasName</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function HasName(name As String) As Boolean</SourceLine>
   <SourceLine>if not EnsureObject() then</SourceLine>
   <SourceLine>return false</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>HasSetType = kHasSetObject</SourceLine>
   <SourceLine>return ObjectValues.HasKey( name )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>name As String</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>Insert</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Insert(index As Integer, value As Variant)</SourceLine>
   <SourceLine>if not EnsureArray() then</SourceLine>
   <SourceLine>return</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>HasSetType = kHasSetArray</SourceLine>
   <SourceLine>ArrayValues.Insert( index, value )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>index As Integer, value As Variant</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Load</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Load(inMB As MemoryBlock, ByRef pos As Integer)</SourceLine>
   <SourceLine>dim inPtr as Ptr = inMB</SourceLine>
   <SourceLine>dim commaFound as boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Determine the type we are loading. If we get here,</SourceLine>
   <SourceLine>// it either has to match self, or this type hasn't been set yet</SourceLine>
   <SourceLine>if inPtr.Byte( pos ) = kOpenSquareBracket then</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>// Loading array</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>self.HasSetType = kHasSetArray</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>do</SourceLine>
   <SourceLine>AdvancePastWhiteSpace( inMB, pos )</SourceLine>
   <SourceLine>if inPtr.Byte( pos ) = kCloseSquareBracket then</SourceLine>
   <SourceLine>if commaFound then</SourceLine>
   <SourceLine>raise new JSONException( "Illegal Value", 10, pos )</SourceLine>
   <SourceLine>return</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>exit do</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>dim value as variant = DecodeValue( inMB, pos )</SourceLine>
   <SourceLine>self.Append value</SourceLine>
   <SourceLine>AdvancePastWhiteSpace( inMB, pos )</SourceLine>
   <SourceLine>commaFound = false</SourceLine>
   <SourceLine>if inPtr.Byte( pos ) = kComma then</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>commaFound = true</SourceLine>
   <SourceLine>elseif inPtr.Byte( pos ) &lt;&gt; kCloseSquareBracket then</SourceLine>
   <SourceLine>raise new JSONException( "A parsing error occurred", 2, pos + 1 )</SourceLine>
   <SourceLine>return</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>loop</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>// Loading object</SourceLine>
   <SourceLine>//</SourceLine>
   <SourceLine>self.HasSetType = kHasSetObject</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>do</SourceLine>
   <SourceLine>AdvancePastWhiteSpace( inMB, pos )</SourceLine>
   <SourceLine>if inPtr.Byte( pos ) = kCloseCurlyBrace then</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>exit do</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim name as string = DecodeString( inMB, pos )</SourceLine>
   <SourceLine>AdvancePastWhiteSpace( inMB, pos )</SourceLine>
   <SourceLine>if inPtr.Byte( pos ) &lt;&gt; kColon then</SourceLine>
   <SourceLine>// Something is wrong</SourceLine>
   <SourceLine>raise new JSONException( "Missing :", 5, pos + 1 )</SourceLine>
   <SourceLine>return</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>AdvancePastWhiteSpace( inMb, pos )</SourceLine>
   <SourceLine>dim value as variant = DecodeValue( inMB, pos )</SourceLine>
   <SourceLine>self.Value( name ) = value</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>AdvancePastWhiteSpace( inMB, pos )</SourceLine>
   <SourceLine>if inPtr.Byte( pos ) = kComma then</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>loop</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>inMB As MemoryBlock, ByRef pos As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Load</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Load(JSONString As String)</SourceLine>
   <SourceLine>if JSONString = "" then</SourceLine>
   <SourceLine>return</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>JSONString = JSONString.ConvertEncoding( Encodings.UTF8 ).Trim</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim firstChar as string = JSONString.LeftB( 1 )</SourceLine>
   <SourceLine>if firstChar = "[" and IsObject then</SourceLine>
   <SourceLine>// Do nothing</SourceLine>
   <SourceLine>return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif firstChar = "{" and IsArray then</SourceLine>
   <SourceLine>// Do nothing</SourceLine>
   <SourceLine>return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif firstChar &lt;&gt; "[" and firstChar &lt;&gt; "{" then</SourceLine>
   <SourceLine>// Do nothing</SourceLine>
   <SourceLine>return</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim inMB as MemoryBlock = JSONString</SourceLine>
   <SourceLine>dim pos as integer</SourceLine>
   <SourceLine>Load( inMB,pos )</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>JSONString As String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Lookup</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Lookup(name As String, defaultValue As Variant) As Variant</SourceLine>
   <SourceLine>if not EnsureObject() then</SourceLine>
   <SourceLine>return nil</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return ObjectValues.Lookup( name, defaultValue )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>name As String, defaultValue As Variant</ItemParams>
  <ItemResult>Variant</ItemResult>
 </Method>
 <Method>
  <ItemName>Name</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Name(index As Integer) As String</SourceLine>
   <SourceLine>if not EnsureObject() then</SourceLine>
   <SourceLine>return ""</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim r as string = ObjectValues.Key( index ).StringValue</SourceLine>
   <SourceLine>r = DecodeName( r )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return r</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>index As Integer</ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Method>
  <ItemName>Names</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Names() As String()</SourceLine>
   <SourceLine>if not EnsureObject() then</SourceLine>
   <SourceLine>return nil</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim d as Dictionary = ObjectValues</SourceLine>
   <SourceLine>dim keys() as variant = d.Keys</SourceLine>
   <SourceLine>dim r() as string</SourceLine>
   <SourceLine>redim r( keys.Ubound )</SourceLine>
   <SourceLine>for i as integer = 0 to keys.Ubound</SourceLine>
   <SourceLine>dim name as string = keys( i )</SourceLine>
   <SourceLine>name = DecodeName( name )</SourceLine>
   <SourceLine>r( i ) = name</SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return r</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>String()</ItemResult>
 </Method>
 <Method>
  <ItemName>ObjectValues</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function ObjectValues() As Dictionary</SourceLine>
   <SourceLine>if not EnsureObject() then</SourceLine>
   <SourceLine>return nil</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if mObjectValues is nil then</SourceLine>
   <SourceLine>mObjectValues = new Dictionary</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return mObjectValues</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>Dictionary</ItemResult>
 </Method>
 <Method>
  <ItemName>Operator_Convert</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Operator_Convert(d As Dictionary)</SourceLine>
   <SourceLine>self.Constructor()</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim keys() as variant = d.Keys</SourceLine>
   <SourceLine>for each name as string in keys</SourceLine>
   <SourceLine>self.Value( name ) = d.Value( name )</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>d As Dictionary</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Operator_Subscript</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Operator_Subscript(index As Integer) As Variant</SourceLine>
   <SourceLine>return self.Value( index )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>index As Integer</ItemParams>
  <ItemResult>Variant</ItemResult>
 </Method>
 <Method>
  <ItemName>Remove</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Remove(index As Integer)</SourceLine>
   <SourceLine>if not EnsureArray() then</SourceLine>
   <SourceLine>return</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ArrayValues.Remove( index )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>index As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Remove</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Remove(name As String)</SourceLine>
   <SourceLine>if not EnsureObject() then</SourceLine>
   <SourceLine>return</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ObjectValues.Remove( name )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>name As String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ToString</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function ToString() As String</SourceLine>
   <SourceLine>dim output() as string</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ToString( output, self, 0 )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim r as string = join( output, "" )</SourceLine>
   <SourceLine>return r</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Method>
  <ItemName>ToString</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ToString(output() As String, settings As JSONItem_MTC, level As Integer)</SourceLine>
   <SourceLine>level = level + 1</SourceLine>
   <SourceLine>dim notCompact as boolean = not( settings.Compact )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>static lotsOfSpaces as string = "        "</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim indenter as string</SourceLine>
   <SourceLine>if notCompact then</SourceLine>
   <SourceLine>dim targetLen as integer = level * settings.IndentSpacing</SourceLine>
   <SourceLine>while lotsOfSpaces.LenB &lt; targetLen</SourceLine>
   <SourceLine>lotsOfSpaces = lotsOfSpaces + lotsOfSpaces</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine>indenter = lotsOfSpaces.LeftB( targetLen )</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if IsArray then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>output.Append "["</SourceLine>
   <SourceLine>if ArrayValues.Ubound &lt;&gt; -1 then</SourceLine>
   <SourceLine>if notCompact then</SourceLine>
   <SourceLine>output.Append EndOfLine</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i as integer = 0 to ArrayValues.Ubound</SourceLine>
   <SourceLine>if notCompact then</SourceLine>
   <SourceLine>output.Append indenter</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim value as variant = ArrayValues( i )</SourceLine>
   <SourceLine>EncodeValue( value, settings, level, output )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if i &lt; ArrayValues.Ubound then</SourceLine>
   <SourceLine>output.Append ","</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>if notCompact then</SourceLine>
   <SourceLine>output.Append EndOfLine</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if notCompact then</SourceLine>
   <SourceLine>'output.Append indenter</SourceLine>
   <SourceLine>output.Append indenter.LeftB( indenter.LenB - settings.IndentSpacing )</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>output.Append "]"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim d as Dictionary = ObjectValues</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>output.Append "{"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if d.Count &lt;&gt; 0 then</SourceLine>
   <SourceLine>if notCompact then</SourceLine>
   <SourceLine>output.Append EndOfLine</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim keys() as variant = d.Keys</SourceLine>
   <SourceLine>for i as integer = 0 to keys.Ubound</SourceLine>
   <SourceLine>if notCompact then</SourceLine>
   <SourceLine>output.Append indenter</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim key as variant = keys( i )</SourceLine>
   <SourceLine>dim name as string = DecodeName( key )</SourceLine>
   <SourceLine>EncodeString( name, settings.EscapeSlashes, output )</SourceLine>
   <SourceLine>output.Append ":"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim value as variant = d.Value( key )</SourceLine>
   <SourceLine>EncodeValue( value, settings, level, output )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if i &lt; keys.Ubound then</SourceLine>
   <SourceLine>output.Append ","</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>if notCompact then</SourceLine>
   <SourceLine>output.Append EndOfLine</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if notCompact then</SourceLine>
   <SourceLine>'output.Append indenter</SourceLine>
   <SourceLine>output.Append indenter.LeftB( indenter.LenB - settings.IndentSpacing )</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>output.Append "}"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>output() As String, settings As JSONItem_MTC, level As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Value</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Value(index As Integer) As Variant</SourceLine>
   <SourceLine>if not EnsureArray() then</SourceLine>
   <SourceLine>return nil</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return ArrayValues( index )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>index As Integer</ItemParams>
  <ItemResult>Variant</ItemResult>
 </Method>
 <Method>
  <ItemName>Value</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Value(index As Integer, Assigns value As Variant)</SourceLine>
   <SourceLine>if not EnsureArray() then</SourceLine>
   <SourceLine>return</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Validate( value )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>HasSetType = kHasSetArray</SourceLine>
   <SourceLine>if ArrayValues.Ubound &lt; index then</SourceLine>
   <SourceLine>ArrayValues.Append value</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>ArrayValues( index ) = value</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>index As Integer, Assigns value As Variant</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Value</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Value(name As String) As Variant</SourceLine>
   <SourceLine>if not EnsureObject() then</SourceLine>
   <SourceLine>return nil</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>name = EncodeName( name )</SourceLine>
   <SourceLine>return ObjectValues.Value( name )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>name As String</ItemParams>
  <ItemResult>Variant</ItemResult>
 </Method>
 <Method>
  <ItemName>Value</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Value(name As String, Assigns value As Variant)</SourceLine>
   <SourceLine>if not EnsureObject then</SourceLine>
   <SourceLine>return</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Validate( value )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>HasSetType = kHasSetObject</SourceLine>
   <SourceLine>name = EncodeName( name )</SourceLine>
   <SourceLine>ObjectValues.Value( name ) = value</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>name As String, Assigns value As Variant</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>EncodeName</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function EncodeName(name As String) As String</SourceLine>
   <SourceLine>dim r as string = name.ConvertEncoding( Encodings.UTF8 )</SourceLine>
   <SourceLine>r = EncodeHex( r )</SourceLine>
   <SourceLine>return r</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>name As String</ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Method>
  <ItemName>DecodeName</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function DecodeName(name As String) As String</SourceLine>
   <SourceLine>dim r as string = DecodeHex( name )</SourceLine>
   <SourceLine>r = r.DefineEncoding( Encodings.UTF8 )</SourceLine>
   <SourceLine>return r</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>name As String</ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Method>
  <ItemName>Validate</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Validate(value As Variant)</SourceLine>
   <SourceLine>dim isGood as boolean = true // Assume it is</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>select case value.Type</SourceLine>
   <SourceLine>case Variant.TypeNil, Variant.TypeBoolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case Variant.TypeString, Variant.TypeCString, Variant.TypePString</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case Variant.TypeDouble, Variant.TypeSingle, Variant.TypeCurrency</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case Variant.TypeInteger, Variant.TypeLong</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case Variant.TypeObject</SourceLine>
   <SourceLine>select case value</SourceLine>
   <SourceLine>case IsA Dictionary</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>raise new JSONException( "Unrecognized Object", 11 )</SourceLine>
   <SourceLine>end select</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>isGood = false</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if not isGood then</SourceLine>
   <SourceLine>raise new JSONException( "Illegal Value", 10 )</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>value As Variant</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Property>
  <ItemName>ArrayValues()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>ArrayValues() As Variant</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>ArrayValues() As Variant</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>Compact</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Compact As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Compact As Boolean = True</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>DecimalFormat</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>DecimalFormat As String</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>DecimalFormat As String = "-0.0##############"</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>EscapeSlashes</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>EscapeSlashes As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>EscapeSlashes As Boolean = True</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>HasSetType</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>HasSetType As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>HasSetType As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>IndentSpacing</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>IndentSpacing As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>IndentSpacing As Integer = 2</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>IsArray</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>IsArray As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>IsArray As Boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return HasSetType = kHasSetArray</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>IsObject</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>IsObject As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>IsObject As Boolean</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return HasSetType = kHasSetObject</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>mObjectValues</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mObjectValues As Dictionary</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mObjectValues As Dictionary</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Compact</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>DecimalFormat</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>-0.0##############</PropertyValue>
   <ItemType>String</ItemType>
   <EditorType>MultiLineEditor</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>EscapeSlashes</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>IndentSpacing</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>2</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>IsArray</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
 </ViewBehavior>
 <Constant>
  <ItemName>kBackSlash</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>kBackSlash</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>92</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>kCloseCurlyBrace</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>kCloseCurlyBrace</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>125</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>kCloseSquareBracket</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>kCloseSquareBracket</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>93</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>kColon</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>kColon</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>58</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>kComma</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>kComma</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>44</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>kForwardSlash</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>kForwardSlash</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>47</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>kHasSetArray</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>kHasSetArray</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>1</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>kHasSetNone</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>kHasSetNone</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>0</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>kHasSetObject</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>kHasSetObject</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>2</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>kOpenCurlyBrace</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>kOpenCurlyBrace</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>123</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>kOpenSquareBracket</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>kOpenSquareBracket</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>91</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>kQuote</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>kQuote</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>34</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
</block>
</RBProject>
